{"ast":null,"code":"import _classCallCheck from \"/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport \"./styles.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.videoRef = React.createRef();\n    _this.canvasRef = React.createRef();\n\n    _this.detectFrame = function (video, model) {\n      model.detect(video).then(function (predictions) {\n        _this.renderPredictions(predictions);\n\n        requestAnimationFrame(function () {\n          _this.detectFrame(video, model);\n        });\n      });\n    };\n\n    _this.renderPredictions = function (predictions) {\n      var ctx = _this.canvasRef.current.getContext(\"2d\");\n\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Font options.\n\n      var font = \"16px sans-serif\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n      predictions.forEach(function (prediction) {\n        var x = prediction.bbox[0];\n        var y = prediction.bbox[1];\n        var width = prediction.bbox[2];\n        var height = 200; //prediction.bbox[3];\n        // Draw the bounding box.\n\n        ctx.strokeStyle = \"#00FFFF\";\n        ctx.lineWidth = 1;\n        ctx.strokeRect(x, y, width, height); // Draw the label background.\n\n        ctx.fillStyle = \"#00FFFF\";\n        var textWidth = ctx.measureText(prediction.class).width;\n        var textHeight = parseInt(font, 10); // base 10\n\n        ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n      });\n      predictions.forEach(function (prediction) {\n        var x = prediction.bbox[0];\n        var y = prediction.bbox[1]; // Draw the text last to ensure it's on top.\n\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(prediction.class, x, y);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        var webCamPromise = navigator.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        }).then(function (stream) {\n          window.stream = stream;\n          _this2.videoRef.current.srcObject = stream;\n          return new Promise(function (resolve, reject) {\n            _this2.videoRef.current.onloadedmetadata = function () {\n              resolve();\n            };\n          });\n        });\n        var modelPromise = cocoSsd.load();\n        Promise.all([modelPromise, webCamPromise]).then(function (values) {\n          _this2.detectFrame(_this2.videoRef.current, values[0]);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"video\", {\n        className: \"size\",\n        autoPlay: true,\n        playsInline: true,\n        muted: true,\n        ref: this.videoRef,\n        width: \"600\",\n        height: \"500\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(\"canvas\", {\n        className: \"size\",\n        ref: this.canvasRef,\n        width: \"600\",\n        height: \"500\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/Users/nicholaspym/Documents/BBD Bursary/Vac Week/tensorflowjs-real-time-object-detection/src/index.js"],"names":["React","ReactDOM","cocoSsd","App","videoRef","createRef","canvasRef","detectFrame","video","model","detect","then","predictions","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","load","all","values","catch","error","console","Component","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport \"./styles.css\";\n\nclass App extends React.Component {\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = predictions => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = 200;//prediction.bbox[3];\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 1;\n      ctx.strokeRect(x, y, width, height);\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n          width=\"600\"\n          height=\"500\"\n        />\n        <canvas\n          className=\"size\"\n          ref={this.canvasRef}\n          width=\"600\"\n          height=\"500\"\n        />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}